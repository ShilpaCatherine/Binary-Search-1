Search a 2D Matrix
// Time Complexity : O(mn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach

Take the top right corner element as starting point
move closer to your target by changing direction based on the current position value and target
Return true if found else return false once the matrix bounds are exceeded

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {

        if(matrix == null || matrix.length == 0){
            return false;
        }
        int r = matrix.length;
        int c = matrix[0].length;
        int i = 0;
        int j = c-1;
        while(i >= 0 && i < r && j >= 0 && j < c ){
            if(matrix[i][j] == target){
                return true;
            }
            else if(matrix[i][j] < target ) {
                i++;
            }else if(matrix[i][j] > target ) {
                j--;
            }


        }
        return false;

    }
}


